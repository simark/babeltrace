/* CTF 1.8 */

trace {
	major = 1;
	minor = 8;
	uuid = "12345678-1234-5678-1234-567812345678";
	byte_order = le;
	packet.header := struct {
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = native; } magic;
		integer { size = 8; align = 8; signed = false; encoding = none; base = decimal; byte_order = native; } uuid[16];
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = native; } stream_id;
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = native; } stream_instance_id;
	} align(8);
};

clock {
	name = the_clock;
	uuid = "ffffffff-ffff-ffff-ffff-ffffffffffff";
	freq = 1000000000;
	precision = 1;
	offset_s = 0;
	offset = 0;
	absolute = false;
};

stream {
	id = 1;
	event.header := struct {
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = native; } id;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = native; map = clock.the_clock.value; } timestamp;
	} align(8);

	packet.context := struct {
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = native; map = clock.the_clock.value; } timestamp_begin;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = native; map = clock.the_clock.value; } timestamp_end;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = native; } content_size;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = native; } packet_size;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = native; } events_discarded;
	} align(8);
};

event {
	name = "the_event_class_1";
	id = 1;
	stream_id = 1;
	fields := struct {
	} align(1);
};

stream {
	id = 2;
	event.header := struct {
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = native; } id;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = native; map = clock.the_clock.value; } timestamp;
	} align(8);

	packet.context := struct {
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = native; map = clock.the_clock.value; } timestamp_begin;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = native; map = clock.the_clock.value; } timestamp_end;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = native; } content_size;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = native; } packet_size;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = native; } events_discarded;
	} align(8);
};

event {
	name = "the_event_class_2";
	id = 2;
	stream_id = 2;
	fields := struct {
	} align(1);
};

