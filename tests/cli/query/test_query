#!/bin/bash
#
# Copyright (C) 2019 Simon Marchi <simon.marchi@efficios.com>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License, version 2 only, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

if [ "x${BT_TESTS_SRCDIR:-}" != "x" ]; then
	UTILSSH="$BT_TESTS_SRCDIR/utils/utils.sh"
else
	UTILSSH="$(dirname "$0")/../../utils/utils.sh"
fi

# shellcheck source=../../utils/utils.sh
SH_TAP=1 source "$UTILSSH"

NUM_TESTS=6

plan_tests $NUM_TESTS

data_dir="${BT_TESTS_DATADIR}/cli/query"
plugin_dir="${data_dir}"

stdout_expected_file=$(mktemp -t test_cli_query_stdout_xpected.XXXXXX)
stdout_file=$(mktemp -t test_cli_query_stdout.XXXXXX)
stderr_file=$(mktemp -t test_cli_query_stderr.XXXXXX)

function expect_success
{
	local expected_str="$1"
	shift 1
	local args=("$@")

	echo "$expected_str" > "$stdout_expected_file"

	bt_diff_cli "$stdout_expected_file" /dev/null \
		--plugin-path "$plugin_dir" \
		query "src.query.SourceWithQueryThatPrintsParams" \
		"${args[@]}"
	ok "$?" "${args[*]}"
}

function expect_failure
{
	local expected_str="$1"
	shift 1
	local args=("$@")
	local test_name="${args[*]}"

	echo -n > "$stdout_expected_file"

	bt_cli "$stdout_file" "$stderr_file" \
		--plugin-path "$plugin_dir" \
		query "src.query.SourceWithQueryThatPrintsParams" \
		"${args[@]}"
	isnt "$?" 0 "${test_name}: exit code is not 0"

	bt_diff /dev/null "$stdout_file"
	ok "$?" "${test_name}: nothing output on stout"

	grep --silent "${expected_str}" "${stderr_file}"
	ok "$?" "${test_name}: expect \`${expected_str}\` error message on stderr"
}

expect_success 'the-object:{}' \
	'the-object'
expect_success "the-object:{'a': 2}" \
	'the-object' -p 'a=2'
expect_success "the-object:{'a': 3, 'ben': 'kin', 'voyons': 'donc'}" \
	'the-object' -p 'a=2,ben=kin' -p 'voyons=donc,a=3'

expect_failure "ValueError: catastrophic failure" \
	'please-fail' -p 'a=2'


rm -f "$stdout_expected_file"
rm -f "$stdout_file"
rm -f "$stderr_file"
